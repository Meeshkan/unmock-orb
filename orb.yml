version: 2.1
description: >
  Use unmock to mock API integrations in your CircleCI builds.
  Repo Home: https://github.com/unmock/unmock-orb
  Website: https://www.unmock.io/

orbs:
  jq: circleci/jq@1.9.0

parameters: &parameters
  file:
    type: string
    description: "Path to test report"
    default: "__unmock__/unmock-report.html"

set_environment_variables: &set_environment_variables
  name: "Download server certificate and set environment variables"
  command: |
    wget https://raw.githubusercontent.com/unmock/unmock-js/dev/packages/unmock-server/certs/ca.pem
    sleep 5
    PROXY_URL=http://localhost:8008
    echo "export HTTP_PROXY=${PROXY_URL}" >> $BASH_ENV
    echo "export HTTPS_PROXY=${PROXY_URL}" >> $BASH_ENV
    echo "export http_proxy=${PROXY_URL}" >> $BASH_ENV
    echo "export https_proxy=${PROXY_URL}" >> $BASH_ENV
    echo "export SSL_CERT_FILE=ca.pem" >> $BASH_ENV

check_report: &check_report
  name: Check report exists
  command: |
    REPORT_FILE=<< parameters.file >>

    if [ -z ${REPORT_FILE} ];
    then
      echo "Empty or missing environment variable: REPORT_FILE";
      exit 1;
    fi;

    if [ -f ${REPORT_FILE} ];  # File exists
    then
        echo "Found file, proceeding with: ${REPORT_FILE}"
    else
        echo "Report not found: ${REPORT_FILE}, exiting."
        exit 1;
    fi

commands:
  start:
    description: "Starts Unmock server and proxy and sets the proxy environment variables."
    steps:
      - run:
          name: "Install Node.js"
          command: |
            sudo apt-get update && sudo apt-get install -y nodejs npm
      - run:
          name: "Checkout Unmock server"
          command: |
            set -o errexit
            set -o pipefail
            git clone --single-branch --branch dev https://github.com/unmock/unmock-js.git
            cd unmock-js && npm i && npm run compile
      - run:
          name: "Start Unmock proxy and server"
          command: |
            DEBUG=unmock* node unmock-js/packages/unmock-server/index.js
          background: true
      - run: *set_environment_variables
  start-docker:
    description: "Starts Unmock server and proxy in Docker container and sets the proxy environment variables. NOTE: This requires running the job in `machine` executor. Running this in `docker` will NOT work."
    steps:
      # - setup_remote_docker
      - run:
          name: "Ensure Docker is available"
          command: |
            docker pull unmock/unmock-server:latest
      - run:
          name: "Start Unmock proxy and server"
          command: |
            docker run -d --rm -p 8000:8000 -p 8008:8008 -p 8443:8443 -v $(pwd)/__unmock__:/app/__unmock__ --name unmock-server unmock/unmock-server
          background: true
      - run: *set_environment_variables
  stop-docker:
    description: "Stops Unmock Docker container started with `start-docker` command."
    steps:
      - run:
          name: "Stop container"
          command: "docker stop unmock-server"
  call:
    description: "Make a test call to Unmock server"
    steps:
      - run:
          name: "Test curl"
          command: |
            curl -i http://petstore.swagger.io/v2/pet/23
  set:
    description: "Sets unmock to return specific status code"
    parameters:
      code:
        type: integer
        description: "Status code you want Unmock to return"
        default: 200
    steps:
      - run:
          name: "Set Unmock status code"
          command: curl -X POST http://localhost:8000/api?code=<<parameters.code>>
  stop:
    description: "Stop the server"
    steps:
      - run:
          name: "Kill Node.js processes"
          command: |
            echo $(pgrep node)  # TODO Kill
  upload:
    description: "Stores Unmock test report as a CircleCI artifact and sends a link in your GitHub PR if you have Unmock GitHub app installed (https://github.com/apps/unmock). Note that the uploaded report will be publicly available on the internet if your CircleCI project is public. Any and all feedback is appreciated!"
    parameters: *parameters
    steps:
      - run: *check_report
      - store_artifacts:
          path: << parameters.file >>
      - jq/install
      - run:
          name: "Determine artifact URL"
          command: |
            set -o errexit
            set -o pipefail

            BUILD_ARTIFACTS_URL=https://circleci.com/api/v1.1/project/github/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BUILD_NUM}/artifacts
            echo "Fetching artifact URL from: ${BUILD_ARTIFACTS_URL}"
            REPORT_ARTIFACT_URL=$(curl --fail ${BUILD_ARTIFACTS_URL} | jq .[0].url) || echo "" # TODO Handle multiple artifacts

            if [ -z ${REPORT_ARTIFACT_URL} ];  # Failed calling the API
            then
              # Fall back to the build page of the form
              # https://circleci.com/gh/unmock/unmock-orb-example/32#artifacts
              REPORT_ARTIFACT_URL=https://circleci.com/gh/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BUILD_NUM}#artifacts
            fi

            echo "Your report lives here: ${REPORT_ARTIFACT_URL}. Enjoy!"
            echo "export REPORT_ARTIFACT_URL=${REPORT_ARTIFACT_URL}" >> $BASH_ENV
      - run:
          name: Post notification to the pull request if Unmock GitHub app is installed
          command: |
            set -o errexit
            set -o pipefail

            if [ -z ${REPORT_ARTIFACT_URL} ];
            then
              echo "REPORT_ARTIFACT_URL empty or undefined, exiting";
              exit 0;
            fi

            # Try sending a notification if pull-request, allow failure.
            if [ ! -z ${CIRCLE_PULL_REQUEST} ];
            then
              REPLY_CODE=$(curl -i --header "Content-Type: application/json" --request POST --data '{"pr":"'"${CIRCLE_PULL_REQUEST}"'","sha1":"'"${CIRCLE_SHA1}"'","url":"'"${REPORT_ARTIFACT_URL}"'"}' https://unmock-ci.azurewebsites.net/notifications/github |
              head -n 1 |  # Keep first line of response
              cut -d$' ' -f2)  # Split the line and take the second value (status code)

              if [ ! ${REPLY_CODE} == 200 ];
              then
                echo "Failed sending notification with code ${REPLY_CODE}.";
              else
                echo "Sent notification."
              fi;

            else
              echo "Not a pull-request, skipping sending notification."
            fi

examples:
  upload:
    description: "Upload your Unmock test reporter files."
    usage:
      version: 2.1
      orbs:
        unmock: unmock/unmock@volatile
      jobs:
        build:
          docker:
            # specify the version you desire here
            - image: circleci/node:10.15.1

          working_directory: ~/repo

          steps:
            - checkout

            # Download and cache dependencies
            - restore_cache:
                keys:
                  - v1-dependencies-{{ checksum "package.json" }}
                  # fallback to using the latest cache if no exact match is found
                  - v1-dependencies-

            - run: yarn install

            - save_cache:
                paths:
                  - node_modules
                key: v1-dependencies-{{ checksum "package.json" }}

            # run tests!
            - run: yarn test
            - unmock/upload:
                file: "__unmock__/report.html"
